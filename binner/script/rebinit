#!/usr/bin/env python

VERSION = "1.0"
REBINNER_CMD = "test"

def get_value(tag, lines):
    for line in lines:
        sline = line.strip()
        if tag in sline:
            if sline.startswith('#'):
                return None
            else:
                return sline.split(':')[-1]
    return None

def run(opts, tempfile):

    if opts.verbose:
        print "Opening", tempfile

    tfile = open(tempfile, "r")
    flines = tfile.readlines()
    tfile.close()

    instrument = get_value("INST", flines)
    runs = get_value("RUN", flines)

    import sns_inst_util
    runlist = sns_inst_util.generateList(runs)

    if opts.verbose:
        print "Instrument:", instrument
        print "Runs:", runlist

    qx = get_value("QX", flines)
    qy = get_value("QY", flines)
    qz = get_value("QZ", flines)

    threshold = get_value("THRESH", flines)

    import os.path
    outputdir = os.path.join(os.path.expanduser("~/results"), instrument)
    filedir = os.path.join(outputdir, str(runlist[0]), str(runlist[0])+"-mesh")
    if opts.verbose:
        print "File directory:", filedir

    import dircache
    filelist = [dfile for dfile in dircache.listdir(filedir) \
                if "bmesh" in dfile and dfile.endswith(".in")]
    if opts.verbose:
        print "Files:", filelist

if __name__ == "__main__":
    import optparse

    description = []
    description.append("This script launches rebinning jobs using a template")
    description.append("file that contains the rebinning grid information.")
    description.append("This script assumes your files are stored in the")
    description.append("results directory in your home area where the run_dgs")
    description.append("command places its output.")

    parser = optparse.OptionParser("usage: %prog [options] <template file>",
                                   None, optparse.Option, VERSION, 'error',
                                   " ".join(description))
    
    parser.add_option("-v", "--verbose", dest="verbose", action="count",
                      help="Flag for turning on script verbosity")
    
    (options, args) = parser.parse_args()
    
    if len(args) < 1:
        parser.error("Must specify the template file on the command-line")
        
    run(options, args[0])
