/**
\page gmesh Gmesh

Rebinner abides by a very simple model:

\code
INPUT  - a series of parallelepipeds with neutron counts and errors in the counts 
OUTPUT - a regular volume of counts and errors
\endcode
 
Because each voxel in the regular volume is a cubic cell,
and can be generalized as a parallelepiped, 
the input and output are considered to of the same general form.
This generalization is not the most efficient for storage.
Specifically, volumes can be stored in many ways more efficient
than treating each cell as a parallelepiped.
Scientists prefer this unification of input and output formats,
however, for the benefits of being able to conveniently
rebin the rebinned results.

The rebinner itself is not bound to using any particular format
that describes the parallelepipeds. 
Gmesh was developed as an internal and tentative data format 
for system development, debugging and verifying use cases.

The basic format is record based. 
Each record describes a parallelepiped.
The first 5 values are the following with datatypes
listed in the parentheses.

\code
energy_slice_id(int) min_energy(double) max_energy(double) hit_count(double) count_err(double)  
\endcode

The next 24 values in the record are the coordinates of 
parallelepiped's 8 corners. 

\code
V1_x(double) V1_y(double) V1_z(double) V2_x(double) V2_y(double) V2_z(double) ...
\endcode 

The input order of the 8 corner vertices
is not important &mdash; the rebinner will always reorder the
corners to correctly represent a convex parallelepiped.
The parallelepipeds can be ill-formed. For instance, in
practice we have encountered paper-thin parallelepipeds 
in real world data. The rebinner can correctly handle
those cases, without requiring external packages to
ensure correctness in this regard.

The default Gmesh format is binary. 
Each parallelepiped takes 228 bytes, i.e.:
\code
(sizeof(int) + sizeof(double) * 4 + sizeof(double) * 3 * 8) = 228 bytes 
\endcode

The binary Gmesh file has no other input meta data. 
For an input data file, \a K number of parallelepipeds
will lead for a data file size of \a K*228 bytes.

<hr>

For efficient application development as well as debugging, 
Gmesh files also have an ASCII format $mdash;
each record or parallelepiped becomes a line of ASCII text 
delimited with "\n". 
All the lines will also have different number of bytes.
But \a K parallelepipeds will always have \a K ASCII lines.

\c bin/gmesht2b and \c bin/gmeshb2t are two utilities
to convert between binary and ASCII format Gmesh files:
text to binary \c (t2b), and binary to text \c (b2t).
A convention used for Gmesh files is to use "in" as
extension name for the ASCII format, and "bin" 
as extension name for binary format.

\code
UNIX> gmesht2b < textualGmesh.in > binaryGmesh.bin
UNIX> gmeshb2t < binaryGmesh.bin > textualGmesh2.in
\endcode

The above converts a textual Gmesh format \c (textualGmesh.in)
to a binary Gmesh format \c (binaryGmesh.bin), and the next
command converts this binary file back to ASCII.
\c textualGmesh.in and \c textualGmesh2.in should be
the same within the precision limit of ASCII formated
floating point numbers.

Common operations applied on Gmesh files include rotating
meshes and rebinning meshes. A different way to represent
the above examples is:

\code
UNIX> cat textualGmesh.in | gmesht2b > binaryGmesh.bin
UNIX> cat binaryGmesh.bin | gmeshb2t > textualGmesh2.in
\endcode

This formulation allows an easy way to reconfigure a rebinning
pipeline. 

\code
UNIX> cat binaryGmesh.in | gmeshrot3 0 0 1 45 | gmeshrebin3 ....
\endcode

The following is a listing of current Gmesh executables (omitting group and size in file listing to save some horizontal spaces).
\code
UNIX> cd bin
UNIX> ll gmesh*
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshb2t*     -> binary to ASCII conversion
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshindex*   -> index (many) gmesh files by bounds
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshmat*     -> generate a transform matrix
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshorderv*  -> reorder vertices (correctly)
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshquery*   -> query by xyz bounds
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshrebin3*  -> THE main rebinner executable
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmeshrot3*    -> rotating a mesh
-rwxr-x---  1 huangj  ... Aug  2 00:23 gmesht2b*     -> ASCII to binary conversion
\endcode

For more comprehensive discussion of how the rebinner package is used 
as a whole, please consult \ref intro, where detailed examples are included.

<hr>

<h2> I/O Considerations</h2>

The rebinner package 
uses basic POSIX I/O, and does not have other forms of I/O component.
In the above example, re-pasted here:
\code
UNIX> cat binaryGmesh.in | gmeshrot3 0 0 1 45 | gmeshrebin3 ....
\endcode

\c cat is the program that explicitly opens the input file and reads
in large chunks.
Hypothetically, the input data could be compressed, e.g.
\code
UNIX> cat gmesh.in | gzip -c > gmesh.in.Z
\endcode

This allows the following:
\code
UNIX> zcat gmesh.in.Z | gmeshrot3 0 0 1 45 | gmeshrebin3 ....
\endcode

This command invokes three processes running in parallel (and in concert). 
\c zcat handles I/O and simultaneous decompresses the data.
On occassion when I/O stalls, the OS kernel will automatically manage
process swaps. 
Although this parallelism is implicit, the acceleration method is powerful
and effective. Using this pipeline parallelism, scalability becomes
a bit hard to quantify, as this is not the same strong/weak scaling
scenario that is commonly measured by parallel speedup.

The connection between processes are implemented via \c pipe, which is
commonly supported through kernel level sockets. Performance is not an
issue, as I/O is so far always the slower part of the link. 

For developing parallel I/O capabilities, it is logical to implement,
for instance, a \c pcat &mdash; a \c cat utility based on parallel I/O.
Similarly, a \c nexus_read could be designed for
reading parallel I/O enabled Nexus files; \c nexus_write could be
designed for writing Nexus files via parallel I/O, i.e.:
\code
UNIX> nexus_read gmesh.nx | gmeshrot3 ... | gmeshrebin3 ... | nexus_write gmeshout.nx
\endcode

This command spawns off four concurrent processes,  one for rotation,
one for rebinning and one for reading (in parallel) 
and one for writing (in parallel).



*/
