#!/usr/bin/env python

VERSION = "1.0"
REBINNER_CMD = "test"
MAKE_VTK_ = "python /SNS/software/bin/convert_vtk_8.py"

def get_queue(inst):
    if inst == "ARCS":
        return "arcs"
    elif inst == "CNCS":
        return "cncsq"
    elif inst == "SEQ" or inst == "SEQUOIA":
        return "sequoiaq"
    else:
        raise RuntimeError("Do not have a SLURM queue for instrument %s" \
                           % inst)

def get_value(tag, lines):
    for line in lines:
        sline = line.strip()
        if tag in sline:
            if sline.startswith('#'):
                return None
            else:
                return sline.split(':')[-1]
    return None

def run(opts, tempfile):

    if opts.verbose:
        print "Opening", tempfile

    tfile = open(tempfile, "r")
    flines = tfile.readlines()
    tfile.close()

    # Parse and retrieve all template information

    instrument = get_value("INST", flines)
    runs = get_value("RUN", flines)

    import sns_inst_util
    runlist = sns_inst_util.generateList(runs)
    num_runs = len(runlist)

    if opts.verbose:
        print "Instrument:", instrument
        print "Runs:", runlist

    qx = get_value("QX", flines)
    qy = get_value("QY", flines)
    qz = get_value("QZ", flines)

    threshold = get_value("THRESH", flines)

    # Make a home for the output

    import os

    if opts.outputdir is None:
        basedir = os.path.join(os.path.expanduser("~/results"), instrument)
        outputdir = os.path.join(basedir, str(runlist[0])+"-rebin")
    else:
        outputdir = os.path.expanduser(opts.outputdir)

    if not os.path.exists(outputdir):
        os.makedirs(outputdir)

    if opts.verbose:
        print "Output File directory:", outputdir
    
    # Gather the base set of files

    filedir = os.path.join(basedir, str(runlist[0]), str(runlist[0])+"-mesh")
    if opts.verbose:
        print "Input File directory:", filedir

    import dircache
    filelist = [dfile for dfile in dircache.listdir(filedir) \
                if "bmesh" in dfile and dfile.endswith(".in")]
    
    if opts.verbose > 1:
        print "Files:", filelist

    # Construct the jobs
    
    import slurm
    for ifile in filelist:
        rebin_input = []
        rebin_input.append(ifile)
        if num_runs > 1:
            for run in runlist[1:]:
                rebin_input.append(ifile.replace(str(runlist[0]), str(run)))
            if opts.verbose:
                print "Input files:", rebin_input
                                   
        # Construct rebinner command
        # TODO! CLI not defined

        # Send out SLURM jobs
        mesh_num = ifile.split('bmesh')[-1].split('.')[0]
        base_name = []
        base_name.append(instrument)
        base_name.append(str(runlist[0]))
        base_name.append("rebin"+mesh_num)

        job_name = "_".join(base_name)
        outlog_name = "_".join(base_name) + ".out"
        errlog_name = "_".join(base_name) + ".err"

        if opts.verbose > 1:
            print "Job name:", job_name
            print "Output Log name:", outlog_name

        """
        jid = slurm.run(cmd, get_queue(instrument), outlog_name, errlog_name,
        verbose=opts.verbose, jobname=job_name)

        if opts.make_vtk:
        vtkcmd = [MAKE_VTK_CMD]

        vtk_name = []
        vtk_name.append(instrument)
        vtk_name.append(str(runlist[0]))
        vtk_name.append("rvtk"+mesh_num)

        vjid = slurm.run(" ".join(vtkcmd), get_queue(instrument),
        verbose=opts.verbose, precursor=jid, jobname="_".join(vtk_name))
        """

if __name__ == "__main__":
    import optparse

    description = []
    description.append("This script launches rebinning jobs using a template")
    description.append("file that contains the rebinning grid information.")
    description.append("This script assumes your files are stored in the")
    description.append("results directory in your home area where the run_dgs")
    description.append("command places its output.")

    parser = optparse.OptionParser("usage: %prog [options] <template file>",
                                   None, optparse.Option, VERSION, 'error',
                                   " ".join(description))
    
    parser.add_option("-v", "--verbose", dest="verbose", action="count",
                      help="Flag for turning on script verbosity")

    parser.add_option("-o", "--outputdir", dest="outputdir",
                      help="Specify a directory to receive the rebinning "\
                      +"output.")

    parser.add_option("-k", "--make-vtk", dest="make_vtk", action="store_true",
                      help="Flag to turn on creation of vtk files from "\
                      +"rebining output.")
    parser.set_defaults(make_vtk=False)
                          
    (options, args) = parser.parse_args()
    
    if len(args) < 1:
        parser.error("Must specify the template file on the command-line")
        
    run(options, args[0])
